import nacl.encoding
import nacl.signing
import random
import re

def main():
	client_da = import_da('client')
	replica_da = import_da('replica')
	
	config = dict()
	with open('config.txt','r') as f:
		for line in f:
			if line[0] != '#':
				(key,sep,val) = line.partition('=')
				# if the line does not contain '=', it is invalid and hence ignored
				if len(sep) != 0:
					val = val.strip()
					config[key.strip()] = int(val) if str.isdecimal(val) else val
	print(config)
	
	replica_num = config['t']
	replica_num = replica_num * 2 + 1
	replicas = new(replica_da.Replica, num = replica_num)
	replica_list = []
	private_keys_list = []
	public_keys_list = []	
	# change set to list
	for replica in replicas:
		replica_list.append(replica)	
		replica_private_key = nacl.signing.SigningKey.generate()
		replica_public_key = replica_private_key.verify_key
		replica_public_key_hex = replica_public_key.encode(encoder = nacl.encoding.HexEncoder)
		public_keys_list.append(replica_public_key_hex)
		private_keys_list.append(replica_private_key)
		
	for index in range(len(replica_list)):
		replica = replica_list[index]
		setup(replica, (index, replica_list, [], 'ACTIVE', private_keys_list[index], public_keys_list))
	
	client_num = config['num_client']
	clients = new(client_da.Client, num=client_num)
	client_id = 0 
	for client in clients:
		workload_string = config['workload[' + str(client_id) + ']']
		if workload_string.startswith("pseudorandom"):
			workload = generatePseudorandomRequests(workload_string)
		else:
			workload = workload_string.split(';')
		timeout = config['client_timeout']
		setup(client, (client_id, replica_list, workload, timeout, [], public_keys_list))
		client_id += 1
	
	start(replicas)
	start(clients)

def generatePseudorandomRequests(workload_string):
	# get seed and number of requests from workload string
	matches = re.findall("pseudorandom\((\d+),(\d+)\)", workload_string)
	if len(matches) != 1:
		return []
	matched_tuple = matches[0]
	random_seed = int(matched_tuple[0])
	n = int(matched_tuple[1])
	
	# set seed for random number generator
	random.seed(random_seed)
	# generate at most ((n / 3) + 1) keys
	key_num = int(n/3) + 1
	request_list = []
	for i in range(n):
		# get a random number from 0 to 100
		random_num = random.randint(0, 100)
		# generate a random operation, there are only 4 operations
		operation_num = random_num % 4
		# generate a random key
		key = random_num % key_num
		if operation_num == 0:
			# put operation
			request = 'put'
			value = random_num % n
			request += "('key_" + str(key) + "','value_" + str(value) + "')"
		elif operation_num == 1:
			# get operation
			request = 'get'
			request += "('key_" + str(key) + "')"
		elif operation_num == 2:
			# slice operation
			request = 'slice'
			slice_start = random_num % 5
			slice_end = random_num % 5
			if slice_end < slice_start:
				slice_end = slice_start + slice_start - slice_end
			request += "('key_" + str(key) + "','" + str(slice_start) + ":" + str(slice_end) + "')"
		else:
			# append operation
			request = 'append'
			value = random_num % n
			request += "('key_" + str(key) + "','value_" + str(value) + "')"
		request_list.append(request)
	print(request_list)
	return request_list
	