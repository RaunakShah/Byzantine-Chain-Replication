## Changes from psuedocode:
## getConfig() does not take two arguments. Takes only one argument - Olympus
## operation.id and operation.type are now independant variables - id and type
## id and type are parameters to send()
## operation_request does not have any attributes except for the operation itself
## after retransmit, client waits for any type of message (result or error). we need a way to specify whether the message is a result or error message, in the same format, maybe a string "result" or "error"

from nacl.bindings.utils import sodium_memcmp
import nacl.encoding
import nacl.signing
import nacl.hash

class Client(process):
	def setup(client_id, olympus, workload, client_timeout, failures):
		# id for each request in the workload, initialized to be 0
		self.workload_id = 0
		# hasher used for hash decoding
		self.HASHER = nacl.hash.sha256
		# replica chain
		self.chain = []
		# replica verify keys
		self.verify_key_list = []
		
	def run():
		# get configuration from Olympus
		(self.chain, self.verify_key_list) = getConfig(self.olympus)
		
		count = 0
		check_configuration_msg = 0
		for request in workload:
			request_type = 'new'
			count += 1
			
			# check configurations with Olympus for every 5 requests from current client
			if count == 5:
				send(('check_configuration', check_configuration_msg, self), to = self.olympus)
				await(
					some(received(('check_configuration_response', response, message_id, _), from_= Olympus),
					has = (message_id == check_configuration_msg and response == 'OK')))
				count = 0
				check_configuration_msg += 1
			
			# request_id is a pair of current client id and current request id in client's workload
			request_id = (client_id, workload_id)
			
			# send operation request to head of replica chain
			send(('operation_request', request_id, request_type, request, self), to= chain[0])
			
			# wait for response from replica for the current request
			if (await(
					some(received(('operation_result', result_request_id, response, result_proof, _),
						from_= _),
					has = (result_request_id == request_id)))):
				#print(result_proof)
		
				# verify operation request
				if verify(request_id, response, result_proof) == False:
					#need to retransmit?
					print("Response not validated")
				print(response)
			elif timeout(3):
				# if timeout, perform retransmit
				retransmit(request_id, request)
			
			# move to next request in client's workload
			workload_id += 1
				
	def verify(request_id, response, result_proof):
		# hash() used temporarily for hashing of result
		response_in_bytes = bytes(response, 'utf-8')
		response_hash = self.HASHER(response_in_bytes, encoder = nacl.encoding.HexEncoder)
		
		#print("result proof")
		#print(result_proof)
		
		# check response hash with all hashes in result proof
		for index in range(len(result_proof)):
			(result_request_id, signed_result_stmt) = result_proof[index]
			
			# request id must match
			if request_id != result_request_id:
				return False
			
			# verify the signature by the replica
			try:
				verify_key = nacl.signing.VerifyKey(self.verify_key_list[index], encoder=nacl.encoding.HexEncoder)
				verify_key.verify(signed_result_stmt)
			except nacl.exceptions.BadSignatureError:
				return False
			
			# check if hashes match
			if not sodium_memcmp(response_hash, signed_result_stmt.message):
				# hash does not match
				print(result_statement_hash[0])
				#NOTE: not needed for phase 2; i think we only need to retransmit the request
				#reconfiguration_reqeust.proof_of_misbehavior = (result, result_proof)
				#need to call a receive handler to use new configuration for retransmit
				#send(reconfiguration_request, to= Olympus)
				return False
		return True

	def retransmit(request_id, request):
		request_type = "retransmission"
		# send retransmission message to all replicas in the chain
		for replica in chain:
			send(('retransmission', request_id, request, request_type, self), to = replica )
		
		# wait for response from replica for the retransmission request
		# can receive (result,result_proof) or error statement from a replica  
		if (await(
				some(received(('operation_result', result_request_id, response, result_proof, _), from_= _),
				has = (result_request_id == request_id)))):
			#verify(response)
			print("RES in retransmit!!")
			print(response)
			print(result_proof)
			#self.workload_id += 1
		# Not needed for phase 2
		#elif (response_type == "error"):
		#	chain = getConfig(Olympus)
		#	retransmit(id, retransmit_request, chain.replicas)

	def getConfig(Olympus):
		# send get current configuration (replica chain and their verify keys) request to Olympus
		send(('get_configuration', self), to = Olympus)
		if await(some(received(('get_configuration_response', chain, verify_key_list, _), from_= Olympus))):
			return (chain, verify_key_list)

