## Changes from psuedocode:
## getConfig() does not take two arguments. Takes only one argument - Olympus
## operation.id and operation.type are now independant variables - id and type
## id and type are parameters to send()
## operation_request does not have any attributes except for the operation itself
## after retransmit, client waits for any type of message (result or error). we need a way to specify whether the message is a result or error message, in the same format, maybe a string "result" or "error"

class Client(process):
	def setup(client_id, chain, workload, client_timeout, failures, public_key_list):
		pass
		
	def run():
		#sendRequest(operation) in psuedocode
		workload_id = 0
		#chain  = getConfig(Olympus)
		for request in workload:
			request_type = 'new'
			request_id = (client_id, workload_id)
			print("NEW ERQUEST")
			print(request)
			print(request_id)
			send(('operation_request', request_id, request_type, request, self), to= chain[0])
			if (await(some(
					received(('operation_result', returned_request_id, response, result_proof, _),
						from_= _),
					has = (returned_request_id == request_id)))):
				print(result_proof)
				workload_id += 1
			elif timeout(client_timeout):
				print('Done')
			
			#if(verify(response) == False): #self.timeout == TRUE:
			#	retransmit(request_id, next_request, chain.replicas)
			#workload_id += 1
				
	def verify(response):
		#hash() used temporarily for hashing of result
		for result_statement_hash in response.result_proof:	
			if(hash(result) != result_statement_hash):
				#NOTE: not needed for phase 2; i think we only need to retransmit the request
				reconfiguration_reqeust.proof_of_misbehavior = (result, result_proof)
				#need to call a receive handler to use new configuration for retransmit
				send(reconfiguration_request, to= Olympus)
				return false
		return true

	def retransmit(op_id, operation, replicas_in_config):
		request_type = "retransmission"
		request_id = op_id
		retransmit_request = operation
		send((request_id, retransmit_request, request_type, self), to= replicas_in_config)
		
		#can receive (result,result_proof) or error statement from a replica.
		#let the  
		await(received((request_id, response, response_type), from_ = _))
		if(response_type == "result"):
			verify(response)
		# Not needed for phase 2
		elif (response_type == "error"):
			chain = getConfig(Olympus)
			retransmit(id, retransmit_request, chain.replicas)

	def getConfig(Olympus):
		send('configQuery', to= Olympus)
		await(received((chain), from_= Olympus))
		return chain

