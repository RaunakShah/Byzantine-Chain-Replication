## Changes from psuedocode:
## getConfig() does not take two arguments. Takes only one argument - Olympus
## operation.id and operation.type are now independant variables - id and type
## id and type are parameters to send()
## operation_request does not have any attributes except for the operation itself
## after retransmit, client waits for any type of message (result or error). we need a way to specify whether the message is a result or error message, in the same format, maybe a string "result" or "error"



class Client(process):
	def setup(workload, client_timeout, failures):
		pass
	def run():
        #sendRequest(operation) in psuedocode
                workload_id = 0
                chain  = getConfig(Olympus)
                for next_request in workload:
                        request_type = "new"
                        request_id = workload_id
                        send((request_id, next_request, request_type, self), to= chain.head)
                        await(some(received((id, response, response_type), from_= chain.tail))) #timeout client_timeout
                        if(verify(response) == False): #self.timeout == TRUE:
                                retransmit(request_id, next_request, chain.replicas)
                        workload_id += 1
	def verify(response):
		#hash() used temporarily for hashing of result
		for result_statement_hash in response.result_proof:	
			if(hash(result) != result_statement_hash):
				#NOTE: not needed for phase 2; i think we only need to retransmit the request
				reconfiguration_reqeust.proof_of_misbehavior = (result, result_proof)
				#need to call a receive handler to use new configuration for retransmit
				send(reconfiguration_request, to= Olympus)
				return false
		return true

	def retransmit(op_id, operation, replicas_in_config):
		request_type = "retransmission"
		request_id = op_id
		retransmit_request = operation
		send((request_id, retransmit_request, request_type, self), to= replicas_in_config)
		
		#can receive (result,result_proof) or error statement from a replica.
		#let the  
		await(received((request_id, response, response_type), from_ = _))
		if(response_type == "result"):
			for result_proof in response:
				verify(response)
		# Not needed for phase 2
		elif (response_type == "error"):
			chain = getConfig(Olympus)
			retransmit(id, retransmit_request, chain.replicas)

	def getConfig(Olympus):
		send('configQuery', to= Olympus)
		await(received((chain), from_= Olympus))
		return chain

