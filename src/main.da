import nacl.encoding
import nacl.signing
import re
import sys

def main():
	client_da = import_da('client')
	olympus_da = import_da('olympus')
	
	# read input config file
	config = dict()
	
	# get config file name
	try:
		file_name = sys.argv[1]
	except IndexError:
		print('Not enough arguments.')
		return
	
	with open(file_name,'r') as f:
		for line in f:
			if line[0] != '#':
				(key,sep,val) = line.partition('=')
				# if the line does not contain '=', it is invalid and hence ignored
				if len(sep) != 0:
					val = val.strip()
					config[key.strip()] = int(val) if str.isdecimal(val) else val
    
	config(channel = 'reliable')
	
	# create an Olympus object
	olympus = new(olympus_da.Olympus, num=1, at = 'MainNode')
	
	# set up signing key and verify key for each client
	client_num = config['num_client']
	client_signing_key_list = []
	client_verify_key_list = []
	for i in range(client_num):
		client_signing_key = nacl.signing.SigningKey.generate()
		client_verify_key = client_signing_key.verify_key
		client_verify_key_hex = client_verify_key.encode(encoder = nacl.encoding.HexEncoder)
		client_signing_key_list.append(client_signing_key)
		client_verify_key_list.append(client_verify_key_hex)
		
	# set up signing key and verify key for Olympus
	olympus_signing_key = nacl.signing.SigningKey.generate()
	olympus_verify_key = olympus_signing_key.verify_key
	olympus_verify_key_hex = olympus_verify_key.encode(encoder = nacl.encoding.HexEncoder)
	
	# create client objects
	timeout = config['client_timeout']
	timeout = int(timeout / 1000)
	clients = new(client_da.Client, num=client_num, at = 'ClientNode')
	
	# set up each client
	client_list = list(clients)
	#for client_id in range(client_num):
	for client_id in range(len(client_list)):
		client = client_list[client_id]
		workload_string = config['workload[' + str(client_id) + ']']
		workload = workload_string.split(';')
		setup(client, (client_id, olympus, workload, timeout, client_signing_key_list[client_id], olympus_verify_key_hex))
		client_id += 1
		
	# set up Olympus 
	setup(olympus, (config, client_list, client_verify_key_list, olympus_signing_key))
	
	# start Olympus and clients
	start(olympus)
	start(clients)
	
