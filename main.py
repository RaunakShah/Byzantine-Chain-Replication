# -*- generated by 1.0.9 -*-
import da
_config_object = {}
import nacl.encoding
import nacl.signing

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        client_da = da.import_da('client')
        replica_da = da.import_da('replica')
        config = dict()
        with open('config.txt', 'r') as f:
            for line in f:
                if (not (line[0] == '#')):
                    (key, sep, val) = line.partition('=')
                    if (not (len(sep) == 0)):
                        val = val.strip()
                        config[key.strip()] = (int(val) if str.isdecimal(val) else val)
        print(config)
        replica_num = config['t']
        replica_num = ((replica_num * 2) + 1)
        replicas = self.new(replica_da.Replica, num=replica_num)
        replica_list = []
        private_keys_list = []
        public_keys_list = []
        for replica in replicas:
            replica_list.append(replica)
        for replica in replicas:
            replica_private_key = nacl.signing.SigningKey.generate()
            replica_public_key = replica_private_key.verify_key
            replica_public_key_hex = replica_public_key.encode(encoder=nacl.encoding.HexEncoder)
            public_keys_list.append(replica_public_key_hex)
            private_keys_list.append(replica_private_key)
        for index in range(len(replica_list)):
            replica = replica_list[index]
            self._setup(replica, (index, replica_list, [], 'ACTIVE', private_keys_list[index], public_keys_list))
        client_num = config['num_client']
        clients = self.new(client_da.Client, num=(client_num - 1))
        client_id = 0
        for client in clients:
            workload_string = config[(('workload[' + str(client_id)) + ']')]
            workload = workload_string.split(';')
            timeout = config['client_timeout']
            self._setup(client, (client_id, replica_list, workload, timeout, [], public_keys_list))
            client_id += 1
        self._start(replicas)
        self._start(clients)
