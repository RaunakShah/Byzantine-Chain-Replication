##	Things not done:
##	1. applying operation 
## 	2. signing of statements
## 	3. hashing of statements
## 	4. check validity of order proof and result proof	
## 	5. validate result shuttle
##	6. cache data structure

import re
from nacl.bindings.utils import sodium_memcmp
import nacl.encoding
import nacl.signing
import nacl.hash
import time

class Replica(process):
	def setup(replica_id, isHead, isTail, prev_replica, next_replica, head, history,
			mode, signing_key, verify_key_list, timeout):
		self.operation_dict = dict()
		self.cache = dict()
		#self.count = 0
		self.HASHER = nacl.hash.sha256
		
	#1. replica p receives operation request from replica client
	def receive(msg = ('operation_request', request_id, request_type, request, _), from_ = client):
		#if(count==0):
		#	time.sleep(5)
		#	count +=1
		if (request_type == 'new'):
			if(self.isHead == True):
				handleNewRequest(request_id, request, client)
				
		elif (request_type == 'retransmission'):
			if (request_id in self.cache.keys() 
					and len(self.cache[request_id]) == 2):
				# replica has cached the result and result proof for the given request id
				print("exist in cache")
				send(('operation_result', request_id, cache[request_id][0], cache[request_id][1], self), to = client)
			#elif self.mode == "IMMUTABLE":
			#	response_type = "error"
			#	send((request_id, NULL, response_type), to= client)	
			else:
				if (self.isHead == True):
					if request_id in self.cache.keys(): 
						# head has ordered operation but not received result shuttle yet
						print("exist in head cache")
						if (await(
								some(received(('result_shuttle', result_shuttle_id, result, result_proof, client), 
									from_= self.next_replica), 
								has = (result_shuttle_id == request_id)))):
							send(('operation_result', request_id, result, result_proof, self), to = client)
						#elif timeout(t):
						# handle timeout, send reconfiguration request to Olympus
					else: 
						# head doesnt recognize operation, it's a new operation
						print("new request")
						handleNewRequest(request_id, request, client)
						if (await(
								some(received(('result_shuttle', result_shuttle_id, result, result_proof, client), 
									from_= self.next_replica), 
								has = (result_shuttle_id == request_id)))): 
							send(('operation_result', request_id, result, result_proof, self), to = client)
						#elif timeout:
						# handle timeout, send reconfiguration request to Olympus
				else: # replica that receives retransmission is not head
					print("need send to head")
					send(('operation_request', request_id, request_type, client), to = self.head)
					if (await(
							some(received(('result_shuttle', result_shuttle_id, result, result_proof, _), 
								from_ = self.next_replica), 
							has = (result_shuttle_id == request_id)))):
						# receive result shuttle, send to client
						send(('operation_result', request_id, result, result_proof, self), to = client)
					#elif timeout(t):
					# handle timeout, send reconfiguration request to Olympus

	def handleNewRequest(request_id, request, client):
		# find the max slot that has been assigned to get the slot to assign
		max_slot = 0
		for (s, _, _, _) in self.history:
			if(s >= max_slot):
				max_slot = s
		if len(self.history) == 0:
			slot = 0
		else:
			slot = max_slot + 1
		
		# create empty lists for order proof and result proof
		order_proof = []
		result_proof = []
    
		# get result and signed order statement of the request
		(result, signed_order_stmt) = applyOperation(slot, request_id, request, order_proof)
		
		# hash and sign the result
		result_in_bytes = bytes(result, 'utf-8')
		hash_result = self.HASHER(result_in_bytes, encoder = nacl.encoding.HexEncoder)
		signed_result = self.signing_key.sign(hash_result)
		
		# add signed order statement and result statement to order proof and result proof
		order_proof.append(signed_order_stmt)
		result_proof.append((request_id, signed_result))
		
		if self.isTail != True:
			# send shuttle to next replica
			send(('shuttle', order_proof, result_proof, request_id, slot, request, client, self), to = self.next_replica)
		else:
			# if there is only 1 replica in the chain, send result to client directly
			send(('operation_result', request_id, result, result_proof, self), to = client)
	
	def applyOperation(slot, request_id, request, order_proof):
		"""
		Perform condition checks then run the request
		"""
		
		# this replica must be in ACTIVE mode
		if(self.mode != 'ACTIVE'):
			return None

		# check if there is any conflict in current request and history of this replica
		# the slot number shouldn't have been assigned to any other request
		if slot in [t[0] for t in self.history]:
			return None
	
		#check for hole -- not needed for phase 2
		#create new pair and add to state
		#slot_operation_pair = (slot, operation)
		#p.state.append(slot_operation_pair)
		#p.checkpoint_index += 1
	
		#checkpointing -- not needed for phase 2
		
		# validate order proof from shuttle
		# check if all replicas preceding this replica have signed order statement and have correct slot and request id
		for index in range(self.replica_id):
			signed_order_stmt = order_proof[index]
			# verify the signature
			try:
				verify_key = nacl.signing.VerifyKey(self.verify_key_list[index], encoder=nacl.encoding.HexEncoder)
				verify_key.verify(signed_order_stmt)
			except nacl.exceptions.BadSignatureError:
				return None
		
			# get order statement by decoding message from signed message
			order_stmt = signed_order_stmt.message.decode()
			matches = re.findall("order<(\d+),\((\d+),\s+(\d+)\),(.*?)>", order_stmt)
			# there should only be one match
			if len(matches) != 1:
				return None
			
			# check if there is any conflict in slot number and request id 
			(slot_str, client_id_str, workload_id_str, request_str) = matches[0]
			if (slot != int(slot_str) 
					or request_id[0] != int(client_id_str) 
					or request_id[1] != int(workload_id_str)
					or request != request_str):
				return None

		# apply operation in the request to the dictionary object
		result = findAndPerformOperation(request)
		
		if result == None:
			return None
	
		# get order statement of current replica
		current_signed_order_stmt = orderCommand(slot, request_id, request, order_proof)
	
		self.cache[request_id] =  result
		
		return (result, current_signed_order_stmt)
		
	def findAndPerformOperation(request):
		"""
		Perform the operation in the request
		"""
		
		request = request.strip()
		if request.startswith('put'):
			# put operation
			operands = re.findall("put\(\'(.*?)\'\,\'(.*?)\'\)", request, re.DOTALL)
			# there should only be one tuple of operands found
			if len(operands) != 1:
				return None
				
			(key, val) = operands[0]
			self.operation_dict[key] = val
			return 'OK'
		elif request.startswith('get'):
			# get operation
			operand = re.findall('get\(\'(.*?)\'\)', request)
			# there should only be one operand found
			if len(operand) != 1:
				return None

			o = operand[0]
			if o in self.operation_dict:
				return self.operation_dict.get(o)
			else:
				return ""
		elif request.startswith('append'):
			# append operation
			operands = re.findall('append\(\'(.*?)\'\,\'(.*?)\'\)', request, re.DOTALL)
			# there should only be one tuple of operands found
			if len(operands) != 1:
				return None
			
			(key, val) = operands[0]
			if key in self.operation_dict:
				self.operation_dict[key] += val
				return 'OK'
			else:
				return 'fail'
		elif request.startswith('slice'):
			# slice operation
			operands = re.findall('slice\(\'(.*?)\',\'(\d+):(\d+)\'\)', request)
			# there should only be one tuple of operands found
			if len(operands) != 1:
				return None
				
			(key, low_index, up_index) = operands[0]
			if (key in self.operation_dict 
					and int(low_index) in range(len(self.operation_dict[key])) 
					and int(up_index) in range(len(self.operation_dict[key]))):
				self.operation_dict[key] = self.operation_dict[key][(int)(low_index):(int)(up_index)]
				return 'OK'
			else:
				return 'fail'
		else:
			return None

	def orderCommand(slot, request_id, request, order_proof):
		"""
		Create a signed order statement and create an order proof to append to history of this replica
		"""
		# create an order statement for this replica
		# make order statement a string so it can be turned into bytes and signed 
		order_statement = "order<" + str(slot) + "," + str(request_id) + "," + request + ">"
		# sign order statement using the signing key of this replica
		signed_order_stmt = self.signing_key.sign(order_statement.encode())
		
		# add order statement from previous replicas to order proof
		current_order_proof = order_proof[:self.replica_id]
		current_order_proof.append(signed_order_stmt)
		print('this the order proof')
		print(current_order_proof)
		
		# add the signed order statement to 
		self.history.append((slot, request_id, request, current_order_proof))
		return signed_order_stmt
    
	#2. replica receives shuttle
	def receive(msg =('shuttle', order_proof, result_proof, request_id, slot, request, client, _), from_= self.prev_replica):
		(result, signed_order_stmt) = applyOperation(slot, request_id, request, order_proof)
		
		# hash and sign the result
		result_in_bytes = bytes(result, 'utf-8')
		hash_result = self.HASHER(result_in_bytes, encoder = nacl.encoding.HexEncoder)
		signed_result = self.signing_key.sign(hash_result)
		
		# add signed order statement and result statement to order proof and result proof
		order_proof.append(signed_order_stmt)
		result_proof.append((request_id, signed_result))
		
		if self.isTail == True:
			send(('operation_result', request_id, result, result_proof, self), to = client)
			send(('result_shuttle', request_id, result, result_proof, self), to = self.prev_replica)
		else:
			send(('shuttle', order_proof, result_proof, request_id, slot, request, client, self), to = self.next_replica)

	#3. replica p receives result shuttle
	def receive(msg =('result_shuttle', result_shuttle_id, result, result_proof, _), from_ = self.next_replica):
		# validate result shuttle
		# check if current replica has signed a result statement in the result shuttle
		(request_id, signed_result) = result_proof[self.replica_id]
		# verify the signature
		try:
			verify_key = nacl.signing.VerifyKey(self.verify_key_list[self.replica_id], encoder=nacl.encoding.HexEncoder)
			verify_key.verify(signed_result)
		except nacl.exceptions.BadSignatureError:
			return
		
		# check if current replica has processed the request id from result shuttle
		if result_shuttle_id not in self.cache:
			return
				
		# cache result proof along with corresponding request id and result
		self.cache[result_shuttle_id] = (result, result_proof)
		
		# send result shuttle to previous replica
		if self.isHead == False:
			send(('result_shuttle', result_shuttle_id, result, result_proof, self), to= self.prev_replica) 	

	##4. replica receives wedge request -- not needed for phase 2
	##def receive(wedge_statement, from_= Olympus
    #
	##5. replica receives checkpoint proof -- not needed for phase 2
	##def receive(checkpoint_shuttle, from_ = replica)
    #
	##6. replica receives catch up message -- not needed for phase 2
	##def receive("catch_up", from_= Olympus)
    #
	##7. replica receives a get running state message -- not needed for phase 2
	##def receive("get_running_state", from_= Olympus)
	
	def run():
		# terminate when receive terminate message from Olympus
		await(some(received(('terminate', _), from_ = Olympus)))
		